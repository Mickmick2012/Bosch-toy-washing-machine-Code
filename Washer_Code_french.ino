/*********Bosch Serie 8 toy washing machine Mod**********
  by @Giacgiac21, @Mickmick2012, @Wishy Washer
  Original idea by @Mickmick2012 and @Wishy Washer
  @Mickmick_washes_things_official (a.k.a Michelangelo Chaume): https://www.youtube.com/channel/UCeqR3VP9sD_Yg3V-uurZH5w
  @Wishy Washer: https://www.youtube.com/channel/UCUahB2ZOtE1biDp3gDAiZVA
  @Giacgiac21: https://www.youtube.com/channel/UC6KFaBeQQt-3KtYDCugNKiA
  1.0 Beta Build
  /*in1/2/enA = motor 1*/

//Librarys and files
#include <EEPROM.h>
#include <Adafruit_SSD1306.h>
#include "pitches.h"
#include "washerfunctions.h"

//Welcome Message
const char welcome_msg[] = "Bienvenue, Mickmick washes things";
const int welcome_text_size = 1;

//Reset Function
void (*resetFunc)(void) = 0;

//settings
unsigned long spin_speed;
const int doorpin = 13;
const int temp = 40;
unsigned long start_delay;

//Rotary Encoder Declarations
const int pinA = 2;
const int pinB = 3;
volatile byte aFlag = 0;
volatile byte bFlag = 0;
volatile byte encoderPos = EEPROM.read(0);
volatile byte oldEncPos = 0;
volatile byte reading = 0;

//Misc Pins
const int led = 9;
const int spk = 11;
const int enA = 5;
const int in1 = 6;
const int in2 = 7;
const int enB = 10;
const int in3 = 12;
const int in4 = 8;

//Settings you can change
boolean SpinDrain_on = 0;

// Button reading, including debounce
const byte buttonPin = 4;
byte oldButtonState = HIGH;
const unsigned long debounceTime = 10;
unsigned long buttonPressTime;
boolean buttonPressed = 0;

// Menu and submenu/setting declarations
byte Mode = 0;
const byte modeMax = 19;

//OLED screen setup
Adafruit_SSD1306 ecranOLED(128, 32, &Wire, -1);
// program durations


int sdelay;
//door
int doorState;

//jingels
const int start_jingle[] = { NOTE_D6, NOTE_A5, NOTE_A6 };
const int play_jingle[] = { NOTE_D6, NOTE_A6 };
const int door_jingle[] = { NOTE_D6, NOTE_D6 };
const int end_jingle[] = { NOTE_D6, NOTE_A5, NOTE_E6, NOTE_A6, 0, NOTE_E6, NOTE_D6, NOTE_A5, NOTE_A5, NOTE_E6, NOTE_A6 };
const int off_jingle[] = { NOTE_E6, NOTE_A6, NOTE_A5 };
const int error_jingle[] = { NOTE_E5, NOTE_A5 };

const int noteDurations[] = {
  4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4
};
int duration;
const int start_jingle_durations[] = { 300, 150, 325 };
const int play_jingle_durations[] = { 300, 150 };
const int jingleDurations[] = { 4, 4, 4, 4, 4 };

//images
#define largeurDeLimage 128
#define hauteurDeLimage 32
const unsigned char logo[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x3f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xf0, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0xc0, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x90, 0x04, 0xe0, 0x00, 0x0f, 0xf8, 0x00, 0x7e, 0x00, 0x7e, 0x00, 0x3f, 0x01, 0xc0, 0x50,
  0x07, 0x30, 0x0e, 0x70, 0x00, 0x0f, 0xfe, 0x01, 0xff, 0x80, 0xff, 0x80, 0xff, 0xc3, 0xc0, 0xf8,
  0x06, 0x70, 0x0f, 0x30, 0x00, 0x0f, 0xff, 0x03, 0xff, 0xc1, 0xff, 0xc1, 0xff, 0xe3, 0xc0, 0xf8,
  0x0c, 0xf0, 0x0f, 0xb8, 0x00, 0x0f, 0xff, 0x87, 0xff, 0xc3, 0xf7, 0xc1, 0xff, 0xe3, 0xc0, 0xf0,
  0x0c, 0xf0, 0x0f, 0x98, 0x00, 0x0f, 0x0f, 0x87, 0xc3, 0xe3, 0xc1, 0x83, 0xe1, 0xc3, 0xc0, 0xf0,
  0x19, 0xff, 0xfd, 0x98, 0x00, 0x0f, 0x07, 0x8f, 0x81, 0xe3, 0xc0, 0x03, 0xc0, 0x83, 0xc0, 0xf0,
  0x19, 0xbf, 0xfd, 0xc8, 0x00, 0x0f, 0x07, 0x8f, 0x01, 0xe3, 0xe0, 0x07, 0xc0, 0x03, 0xe0, 0xf0,
  0x19, 0xb0, 0x0c, 0xcc, 0x00, 0x0f, 0x9f, 0x0f, 0x00, 0xf3, 0xfc, 0x07, 0x80, 0x03, 0xff, 0xf0,
  0x19, 0xb0, 0x0c, 0xcc, 0x00, 0x0f, 0xfe, 0x0f, 0x00, 0xf1, 0xff, 0x87, 0x80, 0x03, 0xff, 0xf0,
  0x1b, 0xb0, 0x0c, 0xcc, 0x00, 0x0f, 0xff, 0x0f, 0x00, 0xf0, 0xff, 0xc7, 0x80, 0x03, 0xff, 0xf0,
  0x19, 0xb0, 0x0c, 0xcc, 0x00, 0x0f, 0xff, 0x8f, 0x00, 0xf0, 0x1f, 0xe7, 0x80, 0x03, 0xff, 0xf0,
  0x19, 0xbf, 0xfc, 0xcc, 0x00, 0x0f, 0x07, 0xcf, 0x01, 0xf0, 0x03, 0xe7, 0x80, 0x03, 0xc0, 0xf0,
  0x19, 0xbf, 0xfd, 0x88, 0x00, 0x0f, 0x07, 0xcf, 0x81, 0xe0, 0x01, 0xe3, 0xc0, 0x03, 0xc0, 0xf0,
  0x1d, 0xf0, 0x0d, 0x98, 0x00, 0x0f, 0x07, 0xc7, 0x83, 0xe1, 0x81, 0xe3, 0xe0, 0xc3, 0xc0, 0xf0,
  0x0c, 0xf0, 0x0f, 0x98, 0x00, 0x0f, 0x0f, 0xc7, 0xff, 0xc3, 0xc3, 0xe3, 0xff, 0xe3, 0xc0, 0xf0,
  0x0e, 0x70, 0x0f, 0x30, 0x00, 0x0f, 0xff, 0x83, 0xff, 0xc3, 0xff, 0xc1, 0xff, 0xe3, 0xc0, 0xf0,
  0x06, 0x30, 0x0e, 0x70, 0x00, 0x0f, 0xff, 0x01, 0xff, 0x81, 0xff, 0x80, 0xff, 0xc3, 0xc0, 0xf0,
  0x03, 0x10, 0x0c, 0x60, 0x00, 0x0f, 0xfe, 0x00, 0xfe, 0x00, 0xff, 0x00, 0x3f, 0x83, 0xc0, 0xf0,
  0x01, 0xc0, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xe0, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x7c, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


// 'path12811', 128x32px
const unsigned char epd_bitmap_path12811[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x38,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x04,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x02,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x02,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x02,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x04,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf8,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


// 'baseline_dark_mode_black_18dp', 128x32px
const unsigned char epd_bitmap_baseline_dark_mode_black_18dp[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 528)
const int epd_bitmap_allArray_LEN = 1;
const unsigned char* epd_bitmap_allArray[1] = {
  epd_bitmap_baseline_dark_mode_black_18dp
};

// 'info_FILL1_wght300_GRAD-25_opsz20', 128x32px
const unsigned char epd_bitmap_info_FILL1_wght300_GRAD_25_opsz20[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xc0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xe0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xf8,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf9, 0xf8,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xf8,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf9, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf9, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf9, 0xf8,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf9, 0xf8,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf9, 0xf8,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xe0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xc0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'error_FILL1_wght300_GRAD-25_opsz20', 128x32px
const unsigned char epd_bitmap_error_FILL1_wght300_GRAD_25_opsz20[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xc0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xe0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf9, 0xf8,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf9, 0xf8,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf9, 0xf8,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf9, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf9, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xf8,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xf8,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf9, 0xf8,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xe0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xc0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'warning_FILL1_wght300_GRAD-25_opsz20', 128x32px
const unsigned char epd_bitmap_warning_FILL1_wght300_GRAD_25_opsz20[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x80,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x80,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0xc0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0xc0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x79, 0xe0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf9, 0xf8,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xf8,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xf8,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};



void setup() {
  // Initialize pins for rotary encoder
  initializePins();

  // Initialize button pin
  pinMode(buttonPin, INPUT_PULLUP);

  // Initialize OLED screen and serial communication
  initializeOLEDAndSerial();

  playStartupJingleAndAnimateLED();

  // Set start delay and spin speed
  setStartDelayAndSpinSpeed();
  // Check and handle E4 error
  handleE4error();

  WelcomeMessage();
  digitalWrite(doorpin, HIGH);
}



void loop() {
  rotaryMenu();
  if (encoderPos == 0) {

  } else if (encoderPos == 10) {

  } else if (encoderPos == 9) {

  } else if (encoderPos == 8) {


  } else if (encoderPos == 11) {
    ecranOLED.clearDisplay();
    ecranOLED.setTextSize(1);
    ecranOLED.setTextColor(WHITE);
    ecranOLED.setCursor(0, 1);
    ecranOLED.println("        ^      ^    +");
    ecranOLED.setCursor(0, 24);
    ecranOLED.println("        v ");
    ecranOLED.setCursor(1, 11);

    if (encoderPos >= 0 && encoderPos < 18) {
      char string[30];
      int ETA = ETAValues();
      unsigned long ETA_with_sdelay = ETA + sdelay;
      snprintf(string, sizeof(string), "      %lu   %lumin", spin_speed, ETA_with_sdelay);
      ecranOLED.println(string);
    }
  } else if (encoderPos >= 18) {

  } else {
    ecranOLED.clearDisplay();
    ecranOLED.setTextSize(1);
    ecranOLED.setTextColor(WHITE);
    ecranOLED.setCursor(0, 1);
    ecranOLED.println(" ^      ^      ^    +");
    ecranOLED.setCursor(0, 24);
    ecranOLED.println(" v      v ");
    ecranOLED.setTextSize(1);
    ecranOLED.setTextColor(WHITE);
    ecranOLED.setCursor(1, 11);
    if (encoderPos >= 0 && encoderPos < 18) {
      char string[30];
      int ETA = ETAValues();
      unsigned long ETA_with_sdelay = ETA + sdelay;
      snprintf(string, sizeof(string), "%d    %lu   %lumin", temp, spin_speed, ETA_with_sdelay);
      ecranOLED.println(string);
    }
  }
  switch (encoderPos) {
    case 0:
      ecranOLED.clearDisplay();
      ecranOLED.setTextSize(1);
      ecranOLED.setTextColor(WHITE);
      ecranOLED.setCursor(0, 0);
      ecranOLED.println("Selectionnez votre programme");
      ecranOLED.display();
      break;
    case 1:
      ecranOLED.setCursor(88, 25);
      ecranOLED.setTextSize(1);
      ecranOLED.println("Coton");
      ecranOLED.display();
      break;
    case 2:
      ecranOLED.setCursor(82, 25);
      ecranOLED.setTextSize(1);
      ecranOLED.println("Coton Eco");
      ecranOLED.display();
      break;
    case 3:
      ecranOLED.setCursor(80, 25);
      ecranOLED.println("EasyCare");
      ecranOLED.display();
      break;
    case 4:
      ecranOLED.setCursor(75, 25);
      ecranOLED.println("Rapide/Mixe");
      ecranOLED.display();
      break;
    case 5:
      ecranOLED.setCursor(71, 25);
      ecranOLED.println("Chargement Mixe");
      ecranOLED.display();
      break;
    case 6:
      ecranOLED.setCursor(86, 25);
      ecranOLED.setTextSize(1);
      ecranOLED.println("Laine");
      ecranOLED.display();
      break;
    case 7:
      ecranOLED.setCursor(86, 25);
      ecranOLED.setTextSize(1);
      ecranOLED.println("--");
      ecranOLED.display();
      break;
    case 8:
      ecranOLED.clearDisplay();
      ecranOLED.setTextSize(1);
      ecranOLED.setTextColor(WHITE);
      ecranOLED.setCursor(5, 16);
      ecranOLED.println("Mode Nuit");
      ecranOLED.display();
      break;
    case 9:
      ecranOLED.clearDisplay();
      ecranOLED.setTextSize(1);
      ecranOLED.setTextColor(WHITE);
      ecranOLED.setCursor(2, 16);
      ecranOLED.println("Vitesse de l'essorage");
      ecranOLED.display();
      break;
    case 10:
      ecranOLED.clearDisplay();
      ecranOLED.setTextSize(1);
      ecranOLED.setTextColor(WHITE);
      ecranOLED.setCursor(5, 16);
      ecranOLED.println("Delai de demmarage");
      ecranOLED.display();
      break;
    case 11:
      ecranOLED.setCursor(80, 25);
      ecranOLED.setTextSize(1);
      ecranOLED.println("Essorage");
      ecranOLED.display();
      break;
    case 12:
      ecranOLED.setCursor(65, 25);
      ecranOLED.setTextSize(1);
      ecranOLED.println("Super Rapide 15/20'");
      ecranOLED.display();
      break;
    case 13:
      ecranOLED.setCursor(82, 25);
      ecranOLED.setTextSize(1);
      ecranOLED.println("Sportif");
      ecranOLED.display();
      break;
    case 14:
      ecranOLED.setCursor(86, 25);
      ecranOLED.setTextSize(1);
      ecranOLED.println("Allergie+");
      ecranOLED.display();
      break;
    case 15:
      ecranOLED.setCursor(86, 25);
      ecranOLED.setTextSize(1);
      ecranOLED.println("EasyCare+");
      ecranOLED.display();
      break;
    case 16:
      ecranOLED.setCursor(86, 25);
      ecranOLED.setTextSize(1);
      ecranOLED.println("AutoSoft");
      ecranOLED.display();
      break;
    case 17:
      ecranOLED.setCursor(86, 25);
      ecranOLED.setTextSize(1);
      ecranOLED.println("Auto");
      ecranOLED.display();
      break;
    default:
      ecranOLED.clearDisplay();
      ecranOLED.setTextSize(1);
      ecranOLED.setTextColor(WHITE);
      ecranOLED.setCursor(0, 0);
      ecranOLED.println("Selectionnez votre programme");
      ecranOLED.display();
      break;
  }
}




void rotaryMenu() {
  if (oldEncPos != encoderPos) {
    Serial.println(encoderPos);
    oldEncPos = encoderPos;
  }

  byte buttonState = digitalRead(buttonPin);
  if (buttonState != oldButtonState) {
    if (millis() - buttonPressTime >= debounceTime) {
      buttonPressTime = millis();
      oldButtonState = buttonState;
      buttonPressed = (buttonState == LOW) ? 1 : 0;
      Serial.println(buttonPressed ? "Button closed" : "Button opened");
    }
  }


  //Main menu section
  if (Mode == 0) {
    if (encoderPos > (modeMax + 10)) encoderPos = modeMax;
    else if (encoderPos > modeMax)
      encoderPos = 0;
    if (buttonPressed) {
      Mode = encoderPos;
      Serial.print("Mode selected: ");
      Serial.println(Mode);
      buttonPressed = 0;

      switch (Mode) {
        case 1:
          Serial.println(", Coton");
          start();
          fill(65000);
          regular_wash();
          drainrinse();
          fill(70000);
          wash();
          drainspin();
          interim_spin();
          final_spin_speed_up();
          final_spin();
          final_spin_slow_down();
          End();
          break;
        case 2:
          Serial.println("Cotton ECO");
          ecranOLED.clearDisplay();
          ecranOLED.setTextSize(2);
          ecranOLED.setTextColor(WHITE);
          ecranOLED.setCursor(0, 0);
          ecranOLED.println("Cotton ECO");
          ecranOLED.display();
          start();
          wash();
          drainspin();
          interim_spin();
          final_spin();
          final_spin();
          final_spin_slow_down();
          End();
          break;
        case 3:
          Serial.println("Easy Care");
          ecranOLED.clearDisplay();
          ecranOLED.setTextSize(2);
          ecranOLED.setTextColor(WHITE);
          ecranOLED.setCursor(0, 0);
          ecranOLED.println("Easy Care");
          ecranOLED.display();
          start();
          regular_wash();
          wash();
          drainspin();
          interim_spin();
          final_spin_speed_up();
          final_spin();
          final_spin_slow_down();
          End();
          break;
        case 4:
          Serial.println("Schnell/Mix");
          ecranOLED.clearDisplay();
          ecranOLED.setTextSize(2);
          ecranOLED.setTextColor(WHITE);
          ecranOLED.setCursor(0, 0);
          ecranOLED.println("Schnell/Mix");
          ecranOLED.display();
          start();
          regular_wash();
          wash();
          drainspin();
          interim_spin();
          final_spin_speed_up();
          final_spin();
          final_spin_slow_down();
          End();
          break;
        case 5:
          Serial.println("Chargement mixe");
          ecranOLED.clearDisplay();
          ecranOLED.setTextSize(2);
          ecranOLED.setTextColor(WHITE);
          ecranOLED.setCursor(0, 0);
          ecranOLED.println("Chargement mixe");
          ecranOLED.display();
          start();
          regular_wash();
          wash();
          drainspin();
          interim_spin();
          final_spin_speed_up();

        case 6:
          Serial.println("Laine");  //DEBUGGING: print which mode has been selected
          ecranOLED.clearDisplay();
          ecranOLED.setTextSize(2);
          ecranOLED.setTextColor(WHITE);
          ecranOLED.setCursor(0, 0);
          ecranOLED.println("Laine");
          ecranOLED.display();
          start();

          ecranOLED.drawBitmap(
            (ecranOLED.width() - largeurDeLimage) / 2,   // Position de l'extrême "gauche" de l'image (pour centrage écran, ici)
            (ecranOLED.height() - hauteurDeLimage) / 2,  // Position de l'extrême "haute" de l'image (pour centrage écran, ici)
            epd_bitmap_path12811,
            largeurDeLimage,
            hauteurDeLimage,
            WHITE);

          wool_wash();
          wool_wash();
          wool_wash();
          drainspin();
          End();
          break;
        case 7:
          doorState = digitalRead(doorpin);
          while (doorState == HIGH) {
            dooropened();
            doorState = digitalRead(doorpin);
          }
          ecranOLED.clearDisplay();
          ecranOLED.setCursor(0, 1);
          ecranOLED.setTextSize(1);
          ecranOLED.println(" ^      ^      ^    +");
          ecranOLED.setCursor(86, 25);
          ecranOLED.setTextSize(1);
          ecranOLED.println("Coton");
          ecranOLED.setCursor(0, 24);
          ecranOLED.setTextSize(1);
          ecranOLED.println(" v      v ");
          fill(10000);
          Mode = 0;
          break;
        case 8:
          if (encoderPos == 8) {
            ecranOLED.clearDisplay();
            ecranOLED.setTextSize(2);
            ecranOLED.setTextColor(WHITE);
            ecranOLED.setCursor(0, 0);
            ecranOLED.println("Mode Nuit: Off");
            ecranOLED.display();
            EEPROM.write(6, 0);
            delay(5000);
          }
          if (encoderPos == 9) {
            ecranOLED.clearDisplay();
            ecranOLED.setTextSize(2);
            ecranOLED.setTextColor(WHITE);
            ecranOLED.setCursor(0, 0);
            ecranOLED.println("Mode Nuit: On");
            ecranOLED.display();
            EEPROM.write(6, 1);
            delay(5000);
          }
          resetFunc();
          break;
        case 9:
          if (encoderPos == 9) {
            EEPROM.write(3, 230);
            ecranOLED.clearDisplay();
            ecranOLED.setTextSize(1);
            ecranOLED.setTextColor(WHITE);
            ecranOLED.setCursor(0, 0);
            ecranOLED.println("Vitesse: 800");
            ecranOLED.display();
            Serial.println("Vitesse: 800");
            delay(1000);
          }
          if (encoderPos == 10) {
            EEPROM.write(3, 240);
            ecranOLED.clearDisplay();
            ecranOLED.setTextSize(1);
            ecranOLED.setTextColor(WHITE);
            ecranOLED.setCursor(0, 0);
            ecranOLED.println("Vitesse: 1000");
            ecranOLED.display();
            Serial.println("Vitesse: 1000");
            delay(1000);
          }
          if (encoderPos == 11) {
            EEPROM.write(3, 255);
            ecranOLED.clearDisplay();
            ecranOLED.setTextSize(1);
            ecranOLED.setTextColor(WHITE);
            ecranOLED.setCursor(0, 0);
            ecranOLED.println("Vitesse: 1200");
            ecranOLED.display();
            Serial.println("Vitesse: 1200");
            delay(1000);
          }
          resetFunc();  //call reset
        case 10:
          if (encoderPos == 10) {
            EEPROM.write(5, 0);
            ecranOLED.clearDisplay();
            ecranOLED.setTextSize(1);
            ecranOLED.setTextColor(WHITE);
            ecranOLED.setCursor(0, 0);
            ecranOLED.println("Delai: Off");
            ecranOLED.display();
            Serial.println("Delai: Off");
            delay(5000);
          }
          if (encoderPos == 11) {
            EEPROM.write(5, 5);
            ecranOLED.clearDisplay();
            ecranOLED.setTextSize(1);
            ecranOLED.setTextColor(WHITE);
            ecranOLED.setCursor(0, 0);
            ecranOLED.println("Delai: 30min");
            ecranOLED.display();
            Serial.println("Delai: 30min");
            delay(5000);
          }
          if (encoderPos == 12) {
            EEPROM.write(5, 1);
            ecranOLED.clearDisplay();
            ecranOLED.setTextSize(1);
            ecranOLED.setTextColor(WHITE);
            ecranOLED.setCursor(0, 0);
            ecranOLED.println("Delai: 1h");
            ecranOLED.display();
            Serial.println("Delai: 1h");
            delay(5000);
          }
          if (encoderPos == 13) {
            EEPROM.write(5, 2);
            ecranOLED.clearDisplay();
            ecranOLED.setTextSize(1);
            ecranOLED.setTextColor(WHITE);
            ecranOLED.setCursor(0, 0);
            ecranOLED.println("Delai: 2h");
            ecranOLED.display();
            Serial.println("Delai: 2h");
            delay(5000);
          }
          if (encoderPos == 14) {
            EEPROM.write(5, 3);
            ecranOLED.clearDisplay();
            ecranOLED.setTextSize(1);
            ecranOLED.setTextColor(WHITE);
            ecranOLED.setCursor(0, 0);
            ecranOLED.println("Delai: 3h");
            ecranOLED.display();
            Serial.println("Delai: 3h");
            delay(5000);
          }
          if (encoderPos == 15) {
            EEPROM.write(5, 4);
            ecranOLED.clearDisplay();
            ecranOLED.setTextSize(1);
            ecranOLED.setTextColor(WHITE);
            ecranOLED.setCursor(0, 0);
            ecranOLED.println("Delai: 4h");
            ecranOLED.display();
            Serial.println("Delai: 4h");
            delay(5000);
          }

          resetFunc();  //call reset


        case 11:
          Serial.println("Essorage");  //DEBUGGING: print which mode has been selected
          ecranOLED.clearDisplay();
          ecranOLED.setTextSize(2);
          ecranOLED.setTextColor(WHITE);
          ecranOLED.setCursor(0, 0);
          ecranOLED.println("Essorage");
          ecranOLED.display();
          start();
          drainspin();
          interim_spin();
          final_spin_speed_up();
          final_spin();
          final_spin_slow_down();
          End();
          break;
        case 12:
          Serial.println("Super Rapide 5/6min");  //DEBUGGING: print which mode has been selected
          ecranOLED.clearDisplay();
          ecranOLED.setTextSize(2);
          ecranOLED.setTextColor(WHITE);
          ecranOLED.setCursor(0, 0);
          ecranOLED.println("Super Rapide 5/6min");
          ecranOLED.display();
          start();
          wash();
          drainspin();
          interim_spin();
          final_spin_speed_up();
          final_spin();
          final_spin_slow_down();
          End();
          break;
        case 13:
          Serial.println("Sportswear");  //DEBUGGING: print which mode has been selected
          ecranOLED.clearDisplay();
          ecranOLED.setTextSize(2);
          ecranOLED.setTextColor(WHITE);
          ecranOLED.setCursor(0, 0);
          ecranOLED.println("Lavage Sportif");
          ecranOLED.display();
          start();
          regular_wash();
          wash();
          drainspin();
          interim_spin();
          final_spin_speed_up();
          final_spin();
          final_spin_slow_down();
          End();
          break;
        case 14:
          Serial.println("AllergiePlus");
          ecranOLED.clearDisplay();
          ecranOLED.setTextSize(2);
          ecranOLED.setTextColor(WHITE);
          ecranOLED.setCursor(0, 0);
          ecranOLED.println("Allergie +");
          ecranOLED.display();
          start();
          regular_wash();
          wash();
          drainspin();
          interim_spin();
          final_spin_speed_up();
          final_spin();
          final_spin_slow_down();
          End();
          break;
        case 15:
          Serial.println("Easycare +");
          ecranOLED.clearDisplay();
          ecranOLED.setTextSize(2);
          ecranOLED.setTextColor(WHITE);
          ecranOLED.setCursor(0, 0);
          ecranOLED.println("Easycare +");
          ecranOLED.display();
          start();
          regular_wash();
          wash();
          drainspin();
          interim_spin();
          final_spin_speed_up();
          final_spin();
          final_spin_slow_down();
          End();
          break;
        case 16:
          Serial.println("Soft");
          ecranOLED.clearDisplay();
          ecranOLED.setTextSize(2);
          ecranOLED.setTextColor(WHITE);
          ecranOLED.setCursor(0, 0);
          ecranOLED.println("Soft");
          ecranOLED.display();
          start();
          regular_wash();
          uni_toss_wash();
          bi_toss_wash();
          wool_wash();
          uni_toss_wash();
          bi_toss_wash();
          drainspin();
          End();
          break;
        case 17:
          Serial.println("Nettoyage Tambour");  //DEBUGGING: print which mode has been selected
          ecranOLED.clearDisplay();
          ecranOLED.setTextSize(2);
          ecranOLED.setTextColor(WHITE);
          ecranOLED.setCursor(0, 0);
          ecranOLED.println("Nettoyage Tambour");
          ecranOLED.display();
          start();

          wash();
          wool_wash();
          bi_toss_wash();
          uni_toss_wash();
          drainspin();
          End();
          break;
        default:
          Mode = 0;
          break;
      }
    }
  }
}
// Carry out common activities each time a setting is changed
void start() {
  if (EEPROM.read(6) == 0) {
    for (int thisNote = 0; thisNote < 2; thisNote++) {
      int noteDuration = 1000 / jingleDurations[thisNote];
      tone(spk, play_jingle[thisNote], noteDuration);
      int pauseBetweenNotes = noteDuration * 0.8;
      delay(pauseBetweenNotes);
      noTone(spk);
    }
  } else {
    ecranOLED.drawBitmap(
      (ecranOLED.width() - largeurDeLimage) / 2,   // Position de l'extrÃªme "gauche" de l'image (pour centrage Ã©cran, ici)
      (ecranOLED.height() - hauteurDeLimage) / 2,  // Position de l'extrÃªme "haute" de l'image (pour centrage Ã©cran, ici)
      epd_bitmap_baseline_dark_mode_black_18dp,
      largeurDeLimage,
      hauteurDeLimage,
      WHITE);
  }
  EEPROM.write(1, 1);
  delay(1000);
  delay(start_delay);
}
void drainrinse() {
  for (int i = 1; i <= 6; i++) {
    analogWrite(led, 0);
    delay(100);
    analogWrite(led, 255);
  }
  delay(60000);
  for (int i = 1; i <= 4; i++) {
    analogWrite(led, 0);
    delay(100);
    analogWrite(led, 255);
  }
}
void drainspin() {
  for (int i = 1; i <= 6; i++) {
    analogWrite(led, 0);
    delay(100);
    analogWrite(led, 255);
  }
  delay(60000);
  for (int i = 1; i <= 2; i++) {
    analogWrite(led, 0);
    delay(100);
    analogWrite(led, 255);
  }
}
void uni_toss_wash() {
  for (int i = 0; i <= 12; i++) {
    runCycle(40, 350, 50);
    runCycle(0, 0, 150);
  }
  delay(4000);
}
void wash() {
  for (int i = 0; i <= 20; i++) {
    runCycle(40, 10000, 5000);
    runCycle(0, 0, 5000);
  }
}
void regular_wash() {
  for (int i = 0; i <= 20; i++) {
    runCycle(45, 10000, 5000);
    runCycle(0, 0, 5000);
  }
}
void wool_wash() {
  for (int i = 0; i <= 40; i++) {
    runCycle(35, 300, 300);
    runCycle(0, 0, 300);
  }
}
void bi_toss_wash() {
  for (int i = 0; i <= 20; i++) {
    runCycle(40, 450, 100);
    runCycle(0, 0, 100);
  }
  delay(4000);
}
void interim_spin() {
  for (int i = 14; i <= EEPROM.read(3) - 25; i++) {
    runCycle(i, 100, 0);
  }
  runCycle(EEPROM.read(3) - 25, 19900, 0);
  for (int i = 1; i <= EEPROM.read(3) - 25; i++) {
    runCycle(255 - i, 100, 0);
  }
  runCycle(0, 0, 10000);
}

void final_spin_speed_up() {
  digitalWrite(in1, HIGH);
  digitalWrite(in2, LOW);
  for (int i = 80; i <= 180; i++) {
    runCycle(i, 100, 0);
  }
  runCycle(181, 49000, 0);
}

void final_spin() {
  for (int i = 181; i <= EEPROM.read(3); i++) {
    runCycle(i, 150, 0);
  }
  runCycle(EEPROM.read(3), 10000, 0);
}

void final_spin_slow_down() {
  for (int i = 0; i <= EEPROM.read(3); i++) {
    runCycle(EEPROM.read(3) - i, 120, 0);
  }
  runCycle(0, 0, 0);
}
void End() {
  EEPROM.write(1, 0);
  ecranOLED.clearDisplay();
  ecranOLED.setTextSize(4);
  ecranOLED.setTextColor(WHITE);
  ecranOLED.setCursor(0, 0);
  ecranOLED.println("Fin");
  ecranOLED.display();
  if (EEPROM.read(6) == 0) {
    for (int thisNote = 0; thisNote < 11; thisNote++) {
      int noteDuration = 1000 / noteDurations[thisNote];
      tone(spk, end_jingle[thisNote], noteDuration);
      int pauseBetweenNotes = noteDuration;
      delay(pauseBetweenNotes);
      noTone(spk);
    }
  }
  delay(7500);
  ecranOLED.clearDisplay();
  ecranOLED.display();
  if (EEPROM.read(6) == 0) {
    for (int thisNote = 0; thisNote < 3; thisNote++) {
      int noteDuration = 1000 / jingleDurations[thisNote];
      tone(spk, off_jingle[thisNote], noteDuration);
      int pauseBetweenNotes = noteDuration * 1.30;
      delay(pauseBetweenNotes);
      noTone(spk);
    }
  }
  for (int i = 0; i <= 255; i++) {
    analogWrite(led, 255 - i);
    delay(10);
  }
  delay(1600);
  resetFunc();  //call reset
}

void runCycle(int speed, int duration1, int duration2) {
  analogWrite(enA, speed);
  digitalWrite(in1, HIGH);
  digitalWrite(in2, LOW);
  delay(duration1);
  digitalWrite(in1, LOW);
  digitalWrite(in2, LOW);
  delay(duration2);
}

void dooropened() {
  Serial.println("DO");
  for (int i = 0; i <= 1; i++) {
    ecranOLED.clearDisplay();
    for (int thisNote = 0; thisNote < 2; thisNote++) {
      int noteDuration = 1000 / jingleDurations[thisNote];
      tone(spk, door_jingle[thisNote], noteDuration);
      int pauseBetweenNotes = noteDuration * 1.30;
      delay(pauseBetweenNotes);
      noTone(spk);
    }
    ecranOLED.setTextSize(1);
    ecranOLED.setTextColor(WHITE);
    ecranOLED.setCursor(0, 0);
    ecranOLED.println("Veuillez fermer la porte");
    ecranOLED.drawBitmap(
      (ecranOLED.width() - largeurDeLimage) / 2,
      (ecranOLED.height() - hauteurDeLimage) / 2,
      epd_bitmap_warning_FILL1_wght300_GRAD_25_opsz20,
      largeurDeLimage,
      hauteurDeLimage,
      WHITE);
    ecranOLED.display();
  }
}
int ETAValues() {
  int duration;

  switch (encoderPos) {
    case 1:
      duration = 27;
      break;
    case 2:
      break;
    case 11:
      duration = 4;
      break;
    default:
      duration = 0;
      break;
  }
  return (duration);
}


void fill(unsigned long ms) {
  analogWrite(enB, 255);
  digitalWrite(in3, HIGH);
  digitalWrite(in4, LOW);
  delay(ms);
  digitalWrite(in3, LOW);
  digitalWrite(in4, LOW);
  analogWrite(enB, 0);
}
void initializePins() {
  pinMode(pinA, INPUT_PULLUP);
  pinMode(pinB, INPUT_PULLUP);
  pinMode(enA, OUTPUT);
  pinMode(in1, OUTPUT);
  pinMode(in2, OUTPUT);
  pinMode(enB, OUTPUT);
  pinMode(in3, OUTPUT);
  pinMode(in4, OUTPUT);

  attachInterrupt(0, PinA, RISING);
  attachInterrupt(1, PinB, RISING);
}

void initializeOLEDAndSerial() {
  Serial.begin(9600);
  ecranOLED.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  ecranOLED.clearDisplay();
  ecranOLED.drawBitmap(
    (ecranOLED.width() - largeurDeLimage) / 2,
    (ecranOLED.height() - hauteurDeLimage) / 2,
    logo,
    largeurDeLimage,
    hauteurDeLimage,
    WHITE);
  ecranOLED.display();
}

void setStartDelayAndSpinSpeed() {
  int delayOption = EEPROM.read(5);
  switch (delayOption) {
    case 0:
      start_delay = 0;
      sdelay = 0;
      break;
    case 1:
      start_delay = 3600000;
      sdelay = 240;
      break;
    case 2:
      start_delay = 7200000;
      sdelay = 60;
      break;
    case 3:
      start_delay = 10800000;
      sdelay = 120;
      break;
    case 4:
      start_delay = 14400000;
      sdelay = 180;
      break;
    case 5:
      start_delay = 1800000;
      sdelay = 30;
      break;
  }

  int spinSpeedOption = EEPROM.read(3);
  switch (spinSpeedOption) {
    case 255:
      spin_speed = 1200;
      break;
    case 240:
      spin_speed = 1000;
      break;
    case 230:
      spin_speed = 800;
      break;
  }
}

void playStartupJingleAndAnimateLED() {
  if (EEPROM.read(6) == 0) {
    for (int thisNote = 0; thisNote < 3; thisNote++) {
      int noteDuration = 1000 / jingleDurations[thisNote];
      tone(spk, start_jingle[thisNote], noteDuration);
      delay(start_jingle_durations[thisNote]);
      noTone(spk);
    }
  }

  if (EEPROM.read(6) == 0) {
    for (int i = 0; i <= 255; i++) {
      analogWrite(led, 0 + i);
      delay(5);
    }
  } else {
    analogWrite(led, 0);
  }
}

void handleE4error() {
  /*
  if (EEPROM.read(1) == 1) {
    ecranOLED.clearDisplay();
      for (int i = 0; i <= 5; i++) {
        for (int thisNote = 0; thisNote < 2; thisNote++) {
          int noteDuration = 1000 / jingleDurations[thisNote];
          tone(spk, error_jingle[thisNote], noteDuration);
          int pauseBetweenNotes = noteDuration * 1.30;
          delay(pauseBetweenNotes);
          noTone(spk);
        }
        ecranOLED.setTextSize(1);
        ecranOLED.setTextColor(WHITE);
        ecranOLED.setCursor(0, 0);
        ecranOLED.println("E4 - Le programme a ete interrompu par arret de courant");
        ecranOLED.display();
        ecranOLED.drawBitmap(
          (ecranOLED.width() - largeurDeLimage) / 2,
          (ecranOLED.height() - hauteurDeLimage) / 2,
          logo,
          largeurDeLimage,
          hauteurDeLimage,
          WHITE);
      }
    }*/


  EEPROM.write(1, 0);
}

void WelcomeMessage() {
  ecranOLED.clearDisplay();
  ecranOLED.setTextSize(welcome_text_size);
  ecranOLED.setTextColor(WHITE);
  ecranOLED.setCursor(0, 0);
  ecranOLED.println(welcome_msg);
  ecranOLED.display();
  delay(3000);
}

void PinA() {
  cli();
  reading = PIND & 0xC;
  if (reading == B00001100 && aFlag) {
    encoderPos--;
    aFlag = bFlag = 0;
    EEPROM.write(0, encoderPos);
  } else if (reading == B00000100)
    bFlag = 1;
  sei();
}

void PinB() {
  cli();
  reading = PIND & 0xC;
  if (reading == B00001100 && bFlag) {
    encoderPos++;
    aFlag = bFlag = 0;
    EEPROM.write(0, encoderPos);
  } else if (reading == B00001000)
    aFlag = 1;
  sei();
}

// end of sketch!
/*........................................................................................................................................................................................................
........................................................................................................................................................................................................
.........................................................''''''''..............................'''''''''...............................'''''''..........................................................
.....',,,',,',,'''',,,',,,,,'''.....................'',,,,,,,,,,,,,,''....................',,,',,,,,,,,,',,,''...................'',,,,,,,,,,,,,,'''...........'''',,,,,,.............',,,,'',,,........
.....',,,,,,,,,,,,,,,,,,,,,,,,,,''...............',,,,,,,,,,,,,,,,,,,,,''..............''',,,,,,,,,,,,,,,,,,,,,''.............'',,,,,,,,,,,,,,,,,,,,,'.........',,,,,,,,,.............',,,,,,,,,........
.....',,,,,,,,,,,,,,,,,',,,,,,,,,,'............',,,,,,,,,,'',,,',,,,,,,,,''...........'',,,,,,,,,,,,,,,,,,,,,,,,''..........'',,,,,,,,,',,,,,'',,,,,,,,'.......'',,,,,,,,.............',,,,,,,,,........
.....',,,,,,,,''''''''''',,,,,,,,,,'..........',,,,,,,,,,''''''',,,,,,,,,,,'.........',,,,,,,,''........'',,,,''...........',,,,,,,,,,,''''''',,,,,,,,'''......',,,,,,,,,.............',,,,,,,,,........
.....',',,,,,,'...........',,,,,,,,,.........'',,,,,,,,'..........',,,,,,,,,'.......',,,,,,,,'.............'''............'',,,,,,,,''..........',,,,'.........'',,,,,,,,.............',,,,,,,,,........
.....',,,,,,,,'...........'',,,,,,,,........',,,,,,,,'..............',,,,,,,,'......',,,,,,,,'...........................',,,,,,,,''.............''............',,,,,,,,,.............'',,,,,,,,........
.....',,,,,,,,'...........',,,,,,,,'.......',,,,,,,,'................',,,,,,,,'.....',',,,,,,,'..........................,,,,,,,,,'............................',,,,,,,,,.............'',,,,,,,,........
.....',,,,,,,''..........',,,,,,,,'........,,,,,,,,,.................',,,,,,','......',,,,,,,,,,'''.....................',,,,,,,,'.............................',,,,,,,,,'''''''''''''',,,,,,,,,........
.....',,,,,,,,,,,,,',,,,,,,,,,,''..........,,,,,,,,'..................,,,,,,,,,.......',,,,,,,,,,,,,,,,,''''............',,,,,,,,..............................',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,........
.....',,,,,,,,,,,,,,,,,,,,,,,,,'...........',,,,,,,'..................',,,,',,,.........'',',,,,,,,,,,,,,,,,,,'.........,,,,,,,,,..............................',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,........
.....',,,,,,,,,,,,,,,,,,,,,,,,,,''.........,',,,,,,'..................,,,,,,,,,............'',,',,,,,,,,,,,,,,,''.......',,,,,,,,..............................',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,........
.....',,,,,,',''........'',,,,,,,,,'.......,,,,,,,,,..................,,,,,,,,,..................''''',,,,,,,,,,,,'.....',,,,,,,,'.............................',,,,,,,,,'''''''''''''',,,,,,,,,........
.....',,,,,,,''............',,,,,,,,'......',,,,,,,''................',,,,,'','.........................',,,,,,,,,'.....',,,,,,,,'.............................',,,,,,,,,.............',,,,,,,,,........
.....',,,,,,,,..............,,,,,,,,''......',,,,,,,'...............',,,,,,',,...........................',,,,,,,,,......',,,,,,,,'............................',,,,,,,,,.............',,,,,,,,,........
.....',,,,,,,,.............',,,,,,,,,'......',,,,,,,,,'............',,,,,,,'''.........'''...............'',,',,,''.......,,,,,,,,,''............',''..........',,,,,,,,,.............',,,,,,,,,........
.....',,,,,,,''...........'',,,,,,,','.......'',,,,,,,,,'.......'',,,,,,,,,,'........',,,''''...........'''',,,,,,'........',,,,,,,,,'''......'',,,,,,''.......',,,,,,,,,.............',,,,,,,,,........
.....',,,,,,,,,',,,,,,,,,,,,',,,,,,,'.........'',,,,,,,,,,',,,,,,,,,,,,,,,''.......',,,,,,,,,,,'''''''',,,,,,,,,,'..........',,,,,,,,,,,,,,,,',,,,,,,,,,'......',,,,,,,,,.............',,,,,,,,,........
.....',,,,,,,',,,,,,,,,,,,,,,,,,,,''............',,,,,,,,,,,,,,,,,,,,,,,,'..........',,,,,,,,,,,,,,,''',,,,,,,,,'.............',,,,,,,,,,,,,,,,,,,,,,,''.......',,,,,,,,,.............'',,,,,,,,........
.....',,,,,,'',,,,,,,,',,,,,,,,''.................'',,,,,,,,,,,,,,,,,,''..............'',,,,,,,,,,,,,,,,,,,,,''.................'',,,,,,,,,,,,,,,,,,''.........',,,,,,,,,.............',,,,,,,,,........
.....''''''''''''''''''''''''.........................'',,,,,,,,,,''......................''',,,,,,,,,,,'''........................''',,,,,,,,,'''..............'''''''''..............'''''''''........
........................................................................................................................................................................................................*/